<?php

namespace Reuniors\Comments\Components;

//use Backend\Controllers\Auth;
use Cms\Classes\ComponentBase;
use Illuminate\Support\Facades\Request;
use Reuniors\Comments\Models\Settings;
use Reuniors\Knk\Models\Location;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Validator;
use Auth;
use DB;
use Reuniors\Comments\Models\Comments as CommentsModel;

/**
 * Class Comments
 * @package Reuniors\Comments\Components
 */
class Comments extends ComponentBase
{

    /**
     * @var The current url path without domain
     */
    public $url;
    /**
     * @var The list comments from database for current page
     */
    public $posts;
    /**
     * @var The list reviews from database for current page
     */
    public $reviews;
    /**
     * @var number comments for page
     */
    public $count;

    /**
     * @return array
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->url = mb_strtolower(Request::path());
    }

    public function componentDetails()
    {
        return [
            'name' => 'Comments',
            'description' => 'Displays a list of comments on the page.'
        ];
    }

    /**
     * @return array
     */
    public function defineProperties()
    {
        return [
            'relatedToAttachment' => [
                'title'       => 'Related to',
                'description' => 'Related to',
                'default'     => null,
                'type'        => 'dropdown',
            ],
            'slug' => [
                'title'       => 'Slug',
                'description' => 'Slug',
                'default'     => '{{ :slug }}',
                'type'        => 'string',
            ],
        ];
    }

    public function getRelatedToAttachmentOptions()
    {
        return CommentsModel::$attachmentFields;
    }

    /**
     * @return array
     */
    public function settings()
    {
        return [
            'allow_guest' => Settings::get('allow_guest', false),
            'recaptcha_enabled' => Settings::get('recaptcha_enabled', false),
            'site_key' => Settings::get('site_key', false)

        ];
    }

    /**
     *
     */
    public function onRun()
    {
        parent::onRun(); // TODO: Change the autogenerated stub
        $this->addCss('/plugins/reuniors/comments/assets/css/comments.css');
        $this->addJs('/plugins/reuniors/comments/assets/js/comments.js');
        if (Settings::get('recaptcha_enabled')) {
            $this->addJs('https://www.google.com/recaptcha/api.js');
        }
        $this->posts = $this->page['posts'] = $this->listPosts();
        $this->reviews = $this->reviews = $this->listReviews();
    }

    /**
     * @return array
     */
    public function onSaveCommentButton()
    {
        $formValidation = [
            'author' => 'alpha_dash|min:2|max:25',
            'email' => 'email',
            'content' => 'required|min:2|max:500'
        ];

        if (!Auth::check()) {
            $formValidation['email'] = 'required|email';
            $formValidation['author'] = 'required|alpha|min:2|max:25';
        }

        $validator = Validator::make(post(), $formValidation);


        // check Validator
        if ($validator->fails()) {
            return [
                'message' => $validator->messages()
            ];
        }

        // check ReCaptcha
        if (Settings::get('recaptcha_enabled')) {
            $check = $this->checkCaptcha();
            if ($check['success'] != true) {
                return ['message' => ['captcha' => ['invalid Captcha']]];
            }
        }

        return $this->saveComment();

    }

    /**
     * @return array
     */
    public function saveComment()
    {
        $model = new CommentsModel();
        $model->content = strip_tags(post('content'));
        $model->url = $this->url;
        $parent_id = post('parent_id');
        $postData = post();
        if (is_numeric($parent_id)) {
            $model->parent_id = $parent_id;
        }
        if (isset($postData['attachment_id']) && isset($postData['attachment_field'])) {
            $model->attachment_id = $postData['attachment_id'];
            $model->attachment_field = $postData['attachment_field'];
        }

        if (Settings::get('allow_guest')) {
            $model->author = post('author');
            $model->email = post('email');
        }

        if (Auth::check()) {
            $model->user_id = Auth::getUser()->id;
        }
        $model->status = Settings::get('status', 1);
        if ($model->save() && $model->status == 1) {
            return ['content' => $this->renderPartial('@list.htm', ['posts' => [$model]])];
        }
    }

    /**
     * @return array
     */
    public function saveCommentWithRating()
    {
        if (!Auth::check()) {
            throw new BadRequestHttpException();
        }
        $model = new CommentsModel();
        $model->content = strip_tags(post('content'));
        $model->url = $this->url;
        $parent_id = post('parent_id');
        $postData = post();
        if (is_numeric($parent_id)) {
            $model->parent_id = $parent_id;
        }
        if (isset($postData['attachment_id']) && isset($postData['attachment_field'])) {
            $model->attachment_id = $postData['attachment_id'];
            $model->with_rating = 1;
            $existingModel = CommentsModel::where([
                'user_id' => Auth::getUser()->id,
                'attachment_id' => $postData['attachment_id'],
                'with_rating' => 1,
            ])->first();
            if ($existingModel !== null) {
                $model = $existingModel;
            }
            $model->attachment_field = $postData['attachment_field'];
        }

        if (Auth::check()) {
            $model->user_id = Auth::getUser()->id;
            if ($model->author === null) {
                $model->author = Auth::getUser()->name;
            }
            if ($model->email === null) {
                $model->email = Auth::getUser()->email;
            }
        }
        $model->content = strip_tags(post('content'));
        $model->status = Settings::get('status', 1);
        if ($model->save() && $model->status == 1) {
            return ['content' => $this->renderPartial('commentsPost::list.htm', ['posts' => [$model]])];
        }
    }

    /**
     * @return array
     */
    protected function listPosts()
    {
        if ($this->property('relatedToAttachment') && $this->property('slug')) {
            $slug = $this->property('slug');
            $comments = CommentsModel::where([
                'attachment_field' => $this->property('relatedToAttachment'), 'status' => CommentsModel::STATUS_APPROVED
            ])
                ->whereHas($this->property('relatedToAttachment'), function($query) use ($slug) {
                    $query->where('slug', $slug);
                })
                ->orderBy('with_rating')
                ->get();
            if ($this->property('relatedToAttachment') === 'location') {
                $location = Location::where('slug', $slug)->first();
                if ($location === null) {
                    throw new BadRequestHttpException();
                }
                $comments->load([
                    'user',
                    'user.location_rating_history' => function($query) use ($location) {
                        $query->select('user_id', DB::raw('AVG(grade) as avg_grade'));
                        $query->where('location_id', $location->id);
                    },
                    'user.user_badge_history' => function($query) use ($location) {
                        $query->whereHas('location_badge_history', function($queryLocation) use ($location) {
                            $queryLocation->where('location_id', $location->id);
                        });
                    },
                    'user.user_badge_history.location_badge_history',
                    'user.user_badge_history.location_badge_history.tag',
                    'user.user_badge_history.location_badge_history.tag.tag_image',
                ]);
            }
        } else {
            $comments = CommentsModel::where([
                'url' => $this->url, 'status' => CommentsModel::STATUS_APPROVED
            ])->get();
        }
        $this->count = count($comments);
        return $this->buildTree($comments);
    }


    /**
     * @return array
     */
    protected function listReviews()
    {
        $slug = $this->property('slug');
        $comments = CommentsModel::where([
            'attachment_field' => $this->property('relatedToAttachment'), 'status' => CommentsModel::STATUS_APPROVED
        ])
            ->whereHas($this->property('relatedToAttachment'), function($query) use ($slug) {
                $query->where('slug', $slug);
            })
            ->where('with_rating', 1)
            ->orderBy('created_at', 'desc')
            ->take(2)
            ->get();
        $location = $this->page->components['locationData']->location;
        if ($location === null) {
            throw new BadRequestHttpException();
        }
        $comments->load([
            'user',
            'user.location_rating_history' => function($query) use ($location) {
                $query->select('user_id', DB::raw('AVG(grade) as avg_grade'));
                $query->where('location_id', $location->id);
            },
            'user.user_badge_history' => function($query) use ($location) {
                $query->whereHas('location_badge_history', function($queryLocation) use ($location) {
                    $queryLocation->where('location_id', $location->id);
                });
            },
            'user.user_badge_history.location_badge_history',
            'user.user_badge_history.location_badge_history.tag',
            'user.user_badge_history.location_badge_history.tag.tag_image',
        ]);
        return $comments;
    }

    /**
     * @param $elements
     * @param int $parentId
     * @return array
     */
    public function buildTree($elements, $parentId = 0)
    {
        $branch = [];

        foreach ($elements as $element) {
            if ($element->parent_id == $parentId) {
                $children = $this->buildTree($elements, $element->id);
                if ($children) {
                    $element['children'] = $children;
                }
                $branch[$element->id] = $element;
//                unset($elements[$element->id]);
            }
        }
        return $branch;
    }

    /**
     * @return mixed
     */
    public function checkCaptcha()
    {
        $url = 'https://www.google.com/recaptcha/api/siteverify';
        $secret = Settings::get('secret_key');
        $response = post('g-recaptcha-response');
        $remoteip = $_SERVER['REMOTE_ADDR'];
        $q = [
            'secret' => $secret,
            'response' => $response,
            'remoteip' => $remoteip
        ];
        $response = file_get_contents($url . '?' . http_build_query($q));
        return json_decode($response, true);
    }

}
